datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
	id                   Int            @id @default(autoincrement())
	OAuth_Id             String         @unique
	created_at           DateTime       @default(now())
	two_factor_enabled   Boolean

	// Relations
	UserProfiles         UserProfiles[]
	CareerLogs           CareerLogs[]  @relation("UserLogs")
	OpponentLogs         CareerLogs[]  @relation("OpponentLogs")
	AchievementLogs      AchievementLogs[]
	NotificationLogs     NotificationLogs[]
	SentFriendships      Friendships[]  @relation("SentFriendships")
	ReceivedFriendships  Friendships[]  @relation("ReceivedFriendships")
	SentNotifications    Notifications[] @relation("SentNotifications")
	ReceivedNotifications Notifications[] @relation("ReceivedNotifications")
	SentMessages         Chats[]        @relation("SentMessages")
	ReceivedMessages     Chats[]        @relation("ReceivedMessages")
	Channels             Channels[]
	ChannelLogs          ChannelLogs[]
}

model UserProfiles {
  id          Int      @id @default(autoincrement())
  user_id     Int
  User_name   String
  Avatar      String
  Lvl         Int
  Users       Users    @relation(fields: [user_id], references: [id])
}

model CareerLogs {
  id          Int      @id @default(autoincrement())
  user_id     Int
  opponent_id Int
  Result      String
  timestamp   DateTime @default(now())
  Users       Users    @relation(name: "UserLogs", fields: [user_id], references: [id])
  Opponents   Users    @relation(name: "OpponentLogs" , fields: [opponent_id], references: [id])
}

model Achievements {
  id          Int      @id @default(autoincrement())
  name        String
  Avatar      String
  description String
  condition   String
  type        String
  AchievementLogs AchievementLogs[]
}

model AchievementLogs {
  id            Int           @id @default(autoincrement())
  user_id       Int
  achievement_id Int
  score         Int
  timestamp     DateTime      @default(now())
  Users         Users         @relation(fields: [user_id], references: [id])
  Achievements  Achievements  @relation(fields: [achievement_id], references: [id])
}

model Notifications {
  id              Int      @id @default(autoincrement())
  title           String
  body            String
  type            String
  sender_id       Int
  recipient_id    Int
  timestamp       DateTime @default(now())
  Users           Users    @relation(name: "SentNotifications", fields: [sender_id], references: [id])
  Recipients      Users    @relation(name: "ReceivedNotifications", fields: [recipient_id], references: [id])
  NotificationLogs NotificationLogs[]
}

model NotificationLogs {
  id              Int           @id @default(autoincrement())
  user_id         Int
  notification_id Int
  read_at         DateTime?
  Users           Users         @relation(fields: [user_id], references: [id])
  Notifications   Notifications @relation(fields: [notification_id], references: [id])
}
model Friendships {
  id          Int    @id @default(autoincrement())
  user_id     Int
  friend_id   Int
  status      String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Users       Users  @relation(name: "SentFriendships", fields: [user_id], references: [id])
  Friends     Users  @relation(name: "ReceivedFriendships", fields: [friend_id], references: [id])
}

model Chats {
  id          Int      @id @default(autoincrement())
  sender_id   Int
  recipient_id Int
  message     String
  timestamp   DateTime @default(now())
  Users           Users    @relation(name: "SentMessages", fields: [sender_id], references: [id])
  Recipients      Users    @relation(name: "ReceivedMessages", fields: [recipient_id], references: [id])
}

model Channels {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  owner_id    Int
  password    String?
  type        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Users       Users   @relation(fields: [owner_id], references: [id])
  ChannelLogs ChannelLogs[]
}

model ChannelLogs {
  id          Int      @id @default(autoincrement())
  channel_id  Int
  user_id     Int
  message     String
  timestamp   DateTime @default(now())
  Users       Users    @relation(fields: [user_id], references: [id])
  Channels    Channels @relation(fields: [channel_id], references: [id])
}